---
import { getCollection, type CollectionEntry } from "astro:content";

interface Props {
  course: CollectionEntry<'courses'>;
  currentLessonSlug: string;
}

const { course, currentLessonSlug } = Astro.props;

// Helper function to slugify module titles
function slugify(text: string): string {
  return text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/\s+/g, '-')           // Replace spaces with -
    .replace(/[^\w-]+/g, '')       // Remove all non-word chars
    .replace(/--+/g, '-');          // Replace multiple - with single -
}

interface LessonInfo {
  title: string;
  slug: string;
  url: string;
  courseSlug: string;
  type: 'standalone' | 'module';
  moduleSlug?: string; // Added to store module slug if applicable
}

const allLessons: LessonInfo[] = [];
const courseSlug = course.slug;

// 1. Add standalone lessons
if (course.data.standaloneLessons && Array.isArray(course.data.standaloneLessons)) {
  for (const lesson of course.data.standaloneLessons) {
    if (lesson.slug && typeof lesson.title === 'string') {
      allLessons.push({
        title: lesson.title,
        slug: lesson.slug,
        url: `/courses/${courseSlug}/lessons/${lesson.slug}`,
        courseSlug: courseSlug,
        type: 'standalone'
      });
    }
  }
}

// 2. Add lessons from modules
if (course.data.modules && Array.isArray(course.data.modules)) {
  for (const module of course.data.modules) {
    if (module.lessons && Array.isArray(module.lessons)) {
      const derivedModuleSlug = slugify(module.title); // Generate module slug
      for (const lesson of module.lessons) {
        if (lesson.slug && typeof lesson.title === 'string') {
          allLessons.push({
            title: lesson.title,
            slug: lesson.slug,
            url: `/courses/${courseSlug}/${derivedModuleSlug}/${lesson.slug}`, // Use derived slug
            courseSlug: courseSlug,
            type: 'module',
            moduleSlug: derivedModuleSlug // Store derived slug
          });
        }
      }
    }
  }
}

let prevLesson: LessonInfo | null = null;
let nextLesson: LessonInfo | null = null;

const currentIndex = allLessons.findIndex(lesson => lesson.slug === currentLessonSlug);

if (currentIndex > 0) {
  prevLesson = allLessons[currentIndex - 1];
}

if (currentIndex !== -1 && currentIndex < allLessons.length - 1) {
  nextLesson = allLessons[currentIndex + 1];
}

const courseHomeUrl = `/courses/${courseSlug}`;
---

<nav class="border-t border-foreground/10 pt-8">
  <div class="flex items-center justify-between gap-4">
    {/* Previous Lesson */}
    {prevLesson ? (
      <a
        href={prevLesson.url}
        class="group inline-flex items-center gap-2 px-4 py-2 text-sm font-light text-foreground/70 hover:text-foreground transition-colors duration-300"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
        </svg>
        <span>Previous</span>
      </a>
    ) : (
      <div></div>
    )}

    {/* Resource Home - Center */}
    <a
      href={courseHomeUrl}
      class="inline-flex items-center px-6 py-3 bg-background border-2 border-foreground/30 rounded-full text-sm font-light text-foreground hover:bg-gradient-to-r hover:from-background hover:to-accent/30 hover:border-accent hover:scale-105 hover:shadow-md transition-all duration-300"
    >
      <span>Resource Home</span>
    </a>

    {/* Next Lesson */}
    {nextLesson ? (
      <a
        href={nextLesson.url}
        class="group inline-flex items-center gap-2 px-4 py-2 text-sm font-light text-foreground/70 hover:text-foreground transition-colors duration-300"
      >
        <span>Next</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
        </svg>
      </a>
    ) : (
      <div></div>
    )}
  </div>
</nav>