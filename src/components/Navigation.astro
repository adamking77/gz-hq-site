---
import { ThemeToggle } from '@/components/ThemeToggle.tsx';
import { Menu, X } from 'lucide-react'; // We'll use inline SVGs or Astro icons instead

const { pathname } = Astro.url;
const isHome = pathname === '/';

const navLinksConfig = {
  home: [
    { href: '/', label: 'Home' },
    { href: '/autonomy-intelligence', label: 'Intelligence' },
    { href: '/courses', label: 'Resources' },
  ],
  other: [
    { href: '/', label: 'Home' },
    { href: '/autonomy-intelligence', label: 'Intelligence' },
    { href: '/courses', label: 'Resources' },
  ],
  common: [],
};

const desktopNavLinks = isHome ? navLinksConfig.home : navLinksConfig.other;
const mobileNavLinks = isHome ? navLinksConfig.home : navLinksConfig.other;
---

<nav id="main-nav" class="fixed top-0 left-0 right-0 z-50 transition-all duration-300 bg-transparent">
  <div class="max-w-6xl mx-auto px-6 lg:px-8">
    <div id="nav-content-container" class="flex items-center justify-between transition-all duration-300 h-20 lg:h-24">
      <a href="/" id="nav-logo" class="font-light tracking-wide text-foreground transition-all duration-300 text-lg">
        GENZEN HQ
      </a>
      
      {/* Desktop Navigation - RIGHT SIDE */}
      <div class="hidden md:flex items-center space-x-8">
        {desktopNavLinks.map(link => (
          'id' in link ? (
            <button
              data-scroll-to={link.id}
              class="nav-link font-light tracking-wide text-foreground/80 hover:text-foreground transition-all duration-300 text-sm"
            >
              {link.label}
            </button>
          ) : (
            <a
              href={link.href}
              class="nav-link font-light tracking-wide text-foreground/80 hover:text-foreground transition-all duration-300 text-sm"
            >
              {link.label}
            </a>
          )
        ))}
        {navLinksConfig.common.map(link => (
          <a 
            href={link.href}
            class="nav-link font-light tracking-wide text-foreground/80 hover:text-foreground transition-all duration-300 text-sm"
          >
            {link.label}
          </a>
        ))}
        <div class="pl-4 border-l border-foreground/10">
          <div id="theme-toggle-desktop-container" class="transition-all duration-300 scale-100">
            <ThemeToggle client:idle />
          </div>
        </div>
      </div>

      {/* Mobile Menu Button */}
      <button id="mobile-menu-button" aria-label="Toggle mobile menu" class="md:hidden p-2">
        <svg id="menu-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-foreground transition-all duration-300 h-5 w-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
        <svg id="x-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-foreground transition-all duration-300 h-5 w-5 hidden">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>

  {/* Mobile Menu */}
  <div id="mobile-menu" class="hidden md:hidden bg-background border-t border-foreground/10">
    <div class="px-4 pt-6 pb-8 space-y-4">
      {mobileNavLinks.map(link => (
         'id' in link ? (
          <button
            data-scroll-to={link.id}
            class="mobile-nav-link block w-full text-left px-4 py-3 text-base font-light tracking-wide text-foreground/80 hover:text-foreground transition-colors"
          >
            {link.label}
          </button>
        ) : (
          <a
            href={link.href}
            class="mobile-nav-link block w-full text-left px-4 py-3 text-base font-light tracking-wide text-foreground/80 hover:text-foreground transition-colors"
          >
            {link.label}
          </a>
        )
      ))}
      {navLinksConfig.common.map(link => (
        <a 
          href={link.href}
          class="mobile-nav-link block w-full text-left px-4 py-3 text-base font-light tracking-wide text-foreground/80 hover:text-foreground transition-colors"
        >
          {link.label}
        </a>
      ))}
      <div class="px-3 py-2 border-t border-foreground/10 pt-4">
        <ThemeToggle client:idle />
      </div>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const nav = document.getElementById('main-nav');
    const navContentContainer = document.getElementById('nav-content-container');
    const navLogo = document.getElementById('nav-logo');
    const desktopNavLinks = document.querySelectorAll('.nav-link'); // Selects all desktop links
    const themeToggleDesktopContainer = document.getElementById('theme-toggle-desktop-container');
    
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const menuIcon = document.getElementById('menu-icon');
    const xIcon = document.getElementById('x-icon');
    const mobileMenu = document.getElementById('mobile-menu');
    let isMobileMenuOpen = false;

    const handleScroll = () => {
      const isScrolled = window.scrollY > 50;
      if (nav && navContentContainer && navLogo && themeToggleDesktopContainer && menuIcon && xIcon) {
        if (isScrolled) {
          nav.classList.add('bg-background/95', 'backdrop-blur-sm', 'border-b', 'border-foreground/10');
          nav.classList.remove('bg-transparent');
          
          navContentContainer.classList.remove('h-20', 'lg:h-24');
          navContentContainer.classList.add('h-14', 'lg:h-16');
          
          navLogo.classList.remove('text-lg');
          navLogo.classList.add('text-base');
          
          desktopNavLinks.forEach(link => {
            link.classList.remove('text-sm');
            link.classList.add('text-sm');
          });
          
          themeToggleDesktopContainer.classList.remove('scale-100');
          themeToggleDesktopContainer.classList.add('scale-90');

          menuIcon.classList.replace('h-5', 'h-4');
          menuIcon.classList.replace('w-5', 'w-4');
          xIcon.classList.replace('h-5', 'h-4');
          xIcon.classList.replace('w-5', 'w-4');

        } else {
          nav.classList.remove('bg-background/95', 'backdrop-blur-sm', 'border-b', 'border-foreground/10');
          nav.classList.add('bg-transparent');
          
          navContentContainer.classList.remove('h-14', 'lg:h-16');
          navContentContainer.classList.add('h-20', 'lg:h-24');
          
          navLogo.classList.remove('text-base');
          navLogo.classList.add('text-lg');
          
          desktopNavLinks.forEach(link => {
            link.classList.remove('text-sm');
            link.classList.add('text-sm');
          });
          
          themeToggleDesktopContainer.classList.remove('scale-90');
          themeToggleDesktopContainer.classList.add('scale-100');

          menuIcon.classList.replace('h-4', 'h-5');
          menuIcon.classList.replace('w-4', 'w-5');
          xIcon.classList.replace('h-4', 'h-5');
          xIcon.classList.replace('w-4', 'w-5');
        }
      }
    };

    const scrollToSection = (sectionId: string) => {
      const element = document.getElementById(sectionId);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
        if (isMobileMenuOpen) {
          toggleMobileMenu();
        }
      }
    };

    const toggleMobileMenu = () => {
      isMobileMenuOpen = !isMobileMenuOpen;
      if (mobileMenu && menuIcon && xIcon) {
        mobileMenu.classList.toggle('hidden');
        menuIcon.classList.toggle('hidden');
        xIcon.classList.toggle('hidden');
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Initial check

    if (mobileMenuButton) {
      mobileMenuButton.addEventListener('click', toggleMobileMenu);
    }

    document.querySelectorAll('button[data-scroll-to]').forEach(button => {
      button.addEventListener('click', (event) => {
        const target = event.currentTarget;
        if (target instanceof HTMLElement && target.dataset.scrollTo) {
          scrollToSection(target.dataset.scrollTo);
        }
      });
    });
    
    // Close mobile menu when a mobile navigation link (<a> tag) is clicked
    document.querySelectorAll('#mobile-menu a.mobile-nav-link').forEach(link => {
      link.addEventListener('click', () => {
        if (isMobileMenuOpen) {
          // Check if it's a page navigation link (not a #hash link for the same page)
          const href = link.getAttribute('href');
          // Simple check: if it starts with '/' or is not a hash link, assume it's a page change.
          // More robust checking might be needed if you have same-page hash links in the mobile menu
          // that are not handled by data-scroll-to buttons.
          if (href && (href.startsWith('/') || !href.startsWith('#'))) {
             toggleMobileMenu();
          }
        }
      });
    });
  });
</script>