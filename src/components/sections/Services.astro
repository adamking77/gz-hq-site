---
const autonomyDivisions = [
  {
    number: "01",
    title: "Personal Autonomy",
    description: "Communication intelligence and extraction protocols when your accomplishments, relationships, or reputation are weaponized to control your choices"
  },
  {
    number: "02", 
    title: "Professional Autonomy",
    description: "Operational redesign and professional identity restoration when your business model or industry position stops serving your actual goals"
  },
  {
    number: "03",
    title: "Generational Autonomy", 
    description: "Legacy intelligence and wealth protection when your family systems or accumulated wealth become targets for sophisticated exploitation"
  },
  {
    number: "04",
    title: "Pattern Recognition",
    description: "Systematic identification of exploitation patterns before they can be weaponized against your personal, professional, or generational agency"
  },
  {
    number: "05",
    title: "Strategic Transformation",
    description: "Converting exploitative dynamics into controlled, predictable systems that you direct rather than systems that direct you"
  }
];
---

<section id="intelligence" class="py-32 lg:py-40">
  <div class="max-w-5xl mx-auto px-16 lg:px-20">
    <div class="grid lg:grid-cols-12 gap-24">
      <div class="lg:col-span-4">
        <div class="space-y-8 sticky top-32" data-animate="services-title">
          <h2 class="text-4xl md:text-5xl font-light leading-tight tracking-tight text-foreground">
            Intelligence
            <span class="block text-foreground/50">Divisions</span>
          </h2>
          <div class="w-12 h-px bg-foreground/20"></div>
        </div>
      </div>

      <div class="lg:col-span-8">
        <div class="space-y-16">
          {autonomyDivisions.map((division, index) => (
            <div 
              class="group"
              data-animate="service-item"
              data-delay={index * 100}
            >
              <div class="grid grid-cols-12 gap-8 items-start py-8 border-b border-foreground/10 last:border-b-0 group-hover:border-accent group-hover:scale-105 group-hover:shadow-md group-hover:bg-gradient-to-r group-hover:from-background group-hover:to-accent/30 transition-all duration-300 rounded-lg px-6 cursor-pointer">
                <div class="col-span-2">
                  <span class="text-2xl font-light text-foreground/30 group-hover:text-foreground/50 transition-colors duration-300">
                    {division.number}
                  </span>
                </div>
                <div class="col-span-10 space-y-4">
                  <h3 class="text-2xl font-light text-foreground group-hover:text-foreground/80 transition-colors duration-300">
                    {division.title}
                  </h3>
                  <p class="text-base font-light text-foreground leading-relaxed max-w-lg">
                    {division.description}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '0px'
    };

    // Initialize elements with opacity-0 and translate-y-8
    const animatedElements = document.querySelectorAll('[data-animate]');
    animatedElements.forEach(element => {
      element.classList.add('opacity-0', 'translate-y-8', 'transition-all', 'duration-700', 'ease-out');
    });

    // Observe services title
    const titleElement = document.querySelector('[data-animate="services-title"]');
    if (titleElement) {
      const titleObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const element = entry.target as HTMLElement;
            element.classList.remove('opacity-0', 'translate-y-8');
            element.classList.add('opacity-100', 'translate-y-0');
          }
        });
      }, observerOptions);

      titleObserver.observe(titleElement);
    }

    // Observe service items with staggered delays
    const serviceItems = document.querySelectorAll('[data-animate="service-item"]');
    serviceItems.forEach((item) => {
      const delay = parseInt(item.getAttribute('data-delay') || '0');
      
      const itemObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const element = entry.target as HTMLElement;
            setTimeout(() => {
              element.classList.remove('opacity-0', 'translate-y-8');
              element.classList.add('opacity-100', 'translate-y-0');
            }, delay);
          }
        });
      }, observerOptions);

      itemObserver.observe(item);
    });
  });
</script>